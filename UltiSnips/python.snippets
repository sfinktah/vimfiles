snippet static "static-ish variable" b
# @static: ${1:varname}
if '$1' not in ${2:function}.__dict__:
	$2.$1 = ${3:None}
endsnippet

snippet raise "raise Exception(s)" w
raise Exception("${1:Refine this exception}")

endsnippet

snippet lambda "lambda []" w
[lambda x: ${2:fn(x)}, ${1:iterlist}]
$0
endsnippet

snippet autoversion "autoversion insert" b
__version_hash__ = ""
__version_info__ = (0, 0, 0)
__version__ = ",".join(map(lambda x: str(x), __version_info__))

import autoversion
autoversion.update_file(__file__)
$0
endsnippet

snippet printa "print address" b
print("0x%x: ${1:message}: ${2:details}" % (${3:ea}))
endsnippet

snippet throwa "throw address" b
raise("0x%x: ${1:message}: ${2:details}" % (${3:ea}))
endsnippet

snippet	0x "0x%x" w
0x%x
endsnippet

# snippet /\$\$(\d+)/ "match.group" r
# \`!p snip.rv = match.group(`!p snip.rv = match.group(1)`)\`
# endsnippet

snippet /\(([a-zA-Z0-9_]+)/ "wrap'n'brack" r
(`!p snip.rv = match.group(1)`, ${1})
endsnippet

snippet /([a-zA-Z_][a-zA-Z0-9_, ]+[a-zA-Z0-9_])\)/ "wrap'n'brack" r
(`!p snip.rv = match.group(1)`)
endsnippet
